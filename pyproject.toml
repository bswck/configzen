[tool.poetry]
name = "configzen"
version = "0.7.2"
description = "The easiest way to manage configuration files in Python"
authors = ["bswck <bswck.dev@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/bswck/configzen"

[tool.poetry.dependencies]
python = "^3.8"
pydantic = "^1.10.10"
anyconfig = "^0.13.0"
typing-extensions = { version = "^4.5.0", python = ">=3.9,<3.11" }
aiofiles = { version = "^23.1.0" }
pyyaml = { version = "^6.0" }
toml = { version = "^0.10.2" }
click = "^8.1.3"
pytest = "^7.4.0"
anyconfig-ion-backend = { version = "^0.2.0", optional = true }
anyconfig-bson-backend = { version = "^0.2.0", optional = true }
anyconfig-cbor2-backend = { version = "^0.2.0", optional = true }
anyconfig-cbor-backend = { version = "^0.2.0", optional = true }
anyconfig-configobj-backend = { version = "^0.2.0", optional = true }
# anyconfig-msgpack-backend = { version = "^0.2.0", optional = true }

[tool.poetry.extras]
ion = ["anyconfig-ion-backend"]
bson = ["anyconfig-bson-backend"]
cbor2 = ["anyconfig-cbor2-backend"]
cbor = ["anyconfig-cbor-backend"]
configobj = ["anyconfig-configobj-backend"]
# msgpack = ["anyconfig-msgpack-backend"]
all = [
    "anyconfig-ion-backend",
    "anyconfig-bson-backend",
    "anyconfig-cbor2-backend",
    "anyconfig-cbor-backend",
    "anyconfig-configobj-backend",
    #     "anyconfig-msgpack-backend",
]

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.284"
mypy = "^1.3.0"
black = "^23.3.0"
pytest = "^7.3.1"
mkdocs = "^1.4.3"
mkdocstrings = "^0.22.0"
pylint = "^2.17.4"

pre-commit = "^3.3.3"
nox = "^2023.4.22"
isort = "^5.12.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.3"
mkdocs-material = "^9.1.18"
mkdocstrings = "^0.22.0"
mkdocstrings-python = "^1.1.2"
jinja2 = "<3.1.0"

[tool.ruff]
target-version = "py38"
select = ["ALL"]
# To discuss the presented rationales, contact the author: @bswck.
ignore = [
    # Description: Missing type annotation for self in method
    # Rationale: It is mostly redundant, as is for ANN102.
    "ANN101",

    # Description: Missing type annotation for cls in method
    # Rationale: It is mostly redundant, as is for ANN101.
    "ANN102",

    # Description: Dynamically typed expressions (typing.Any) are disallowed
    # Rationale:
    #  The library operates on lots of user-end, dynamically typed data structures.
    #  When it is possible, use object instead of Any when typing only-input values
    #  whose extra (to the object class) methods are not used.
    "ANN401",

    # Description: Function is too complex (14 > 10)
    # Rationale:
    #  Too complex functions very often are unimprovable without sacrificing readability.
    #  This rule is disabled for now, but might be enabled in the future.
    "C901",

    # Description: 1 blank line required before class docstring
    # Rationale: D211 (no-blank-line-before-class) preferred.
    "D203",

    # Description: Multi-line docstring summary should start at the second line
    # Rationale: D213 (multi-line-summary-second-line) preferred.
    "D212",

    # Description: Missing docstring in public module
    # Rationale: To be removed after full-fledged docs are added.
    "D100",

    # Description: Missing docstring in public class
    # Rationale: To be removed after full-fledged docs are added.
    "D101",

    # Description: Missing docstring in public method
    # Rationale: To be removed after full-fledged docs are added.
    "D102",

    # Description: Missing docstring in public function
    # Rationale: To be removed after full-fledged docs are added.
    "D103",

    # Description: Missing docstring in magic method
    # Rationale:
    #   Most undocumented magic methods docstrings
    #   should default to their super versions.
    "D105",

    # Description: Missing docstring in public nested class
    # Rationale: Nested classes can be described in their factory.
    "D106",

    # Description: Missing docstring in __init__
    # Rationale: To be removed after full-fledged docs are added.
    "D107",

    # Description: 1 blank line required between summary line and description
    # Rationale:
    #   Some summaries are too long to fit one line and needs to be multiline.
    #   That triggers this rule.
    "D205",

    # Description: Use .loc instead of .at.  If speed is important, use numpy.
    # Rationale: This project does not use pandas (intentionally not ignoring whole PD).
    "PD008",

    # Description: Too many branches
    # Rationale: To be removed before releasing 1.0.0.
    "PLR0912",

    # Description: Too many arguments to function call
    # Rationale: This is often intentional and improves readability. Disabled for now.
    "PLR0913",

    # Description: Unnecessary variable assignment before return statement
    # Rationale:
    #   This is definitely not an anti-pattern as some may claim.
    #   Assigning to a variable before returning might be a subtle hint to the reader
    #   that the function is about to extend its functionality in the future.
    "RET504",

    # Description: Use of assert detected
    # Rationale:
    #   Asserts are not bad per se.
    #   Just turn them off in production by using the -O flag if performance matters.
    "S101",

    # Description: Line contains TODO, consider resolving the issue
    # Rationale: Thanks! I will.
    "FIX002",
]
# Always be careful. Use with caution.
fix = false
exclude = ["examples/", "tests/"]

[tool.isort]
profile = "black"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry_bumpversion.file."README.md"]
search = 'configzen `v{current_version}`'
replace = 'configzen `v{new_version}`'

[tool.poetry_bumpversion.file."configzen/__init__.py"]
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'
